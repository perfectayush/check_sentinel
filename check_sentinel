#!/usr/bin/env ruby
#
# Sensu plugin to monitor Redis sentinel
#
# Checks general connectivity to a Redis sentinel server and will go critical
# for any of the following conditions:
#   * Inability to connect to the sentinel server
#   * Sentinel reports it isn't monitoring any masters
#   * Sentinel has entered TILT mode
#
# Arguments:
# -H --host HOSTNAME to connect to (defaults to 127.0.0.1)
# -p --port PORT to connect to (defaults to 26379)
#
# Requires the "redis" Rubygem
#
# Author: Chris Boulton <chris@chrisboulton.com>
# License: MIT (http://www.opensource.org/licenses/mit-license.php)
#

require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'sensu-plugin/check/cli'
require 'redis'

class RedisSentinelCheck < Sensu::Plugin::Check::CLI

  option :host,
    :short => '-h HOST',
    :long => '--host HOST',
    :description => 'Redis Sentinel Host to connect to',
    :required => false,
    :default => '127.0.0.1'

  option :port,
    :short => '-p PORT',
    :long => '--port PORT',
    :description => 'Redis Port to connect to',
    :proc => proc { |p| p.to_i },
    :required => false,
    :default => 26379

  option :timeout,
    :short => '-t TIMEOUT',
    :long => '--timeout TIMEOUT',
    :description => 'Timeout for redis connection',
    :proc => proc { |p| p.to_i },
    :required => false,
    :default => 2

  @@results = []
  @@exit_status = :ok

  def add_state(status, msg, should_exit = false)
    @@results.push(msg)
    @@exit_status = status if @@STATES[status] > @@STATES[@@exit_status]
    if should_exit
      do_exit
    end
  end

  def add_info(msg)
    @@results.push(msg)
  end

  def do_exit
    send(@@exit_status,"#{@@exit_status.upcase} - #{@@results.join('. ')}")
  end

  def run
    begin
      redis = Redis.new(:host => config[:host], :port => config[:port], :timeout => config[:timeout])

      info = redis.info
      add_state(:critical, 'Redis instance is not configured as a sentinel', true)  unless info['sentinel_masters']
      add_state(:critical, 'Sentinel has entered TILT mode', true) if info['sentinel_tilt'] != '0'

      if info['sentinel_masters'] == '0'
        add_state(:critical, 'Sentinel is not monitoring any masters', true)
      else
        add_info("Monitoring #{info['sentinel_masters']} masters")
      end
    rescue Redis::CannotConnectError => e
      add_state(:critical, e, true)
    end

    do_exit
  end
end
