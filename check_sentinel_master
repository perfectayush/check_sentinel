#!/usr/bin/env ruby
#
# Sensu plugin to monitor the reachability of a given Redis sentinel master
#
# Checks reachability of a given Redis master configured against a Redis
# sentinel server and will go critical for any of the following conditions:
#   * Inability to connect to the sentinel server
#   * The given Redis master is not configured on the sentinel server
#   * No Redis address/port is returned for the given master name
#   * The Redis instance returned is not reachable
#   * The Redis instance returned does not have the role "master"
#
# Arguments:
# -m --master MASTER name (required)
# -H --host HOSTNAME to connect to (defaults to 127.0.0.1)
# -p --port PORT to connect to (defaults to 26379)
#
# Requires the "redis" Rubygem
#
# Author: Chris Boulton <chris@chrisboulton.com>
# License: MIT (http://www.opensource.org/licenses/mit-license.php)
#

require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'sensu-plugin/check/cli'
require 'redis'

class RedisSentinelMasterCheck < Sensu::Plugin::Check::CLI

  option :host,
    :short => '-h HOST',
    :long => '--host HOST',
    :description => 'Redis Sentinel Host to connect to',
    :required => false,
    :default => '127.0.0.1'

  option :port,
    :short => '-p PORT',
    :long => '--port PORT',
    :description => 'Redis Port to connect to',
    :proc => proc { |p| p.to_i },
    :required => false,
    :default => 26379

  option :master,
    :short => '-m MASTER',
    :long => '--master MASTER',
    :description => 'Redis Sentinel Master to check',
    :required => true

  option :timeout,
    :short => '-t TIMEOUT',
    :long => '--timeout TIMEOUT',
    :description => 'Timeout for redis connection',
    :proc => proc { |p| p.to_i },
    :required => false,
    :default => 2


  @@STATES = {
    :ok       => 0,
    :warning  => 1,
    :critical => 2,
    :unknown  => 3
  }

  @@results = []
  @@exit_status = :ok

  def add_state(status, msg, should_exit = false)
    @@results.push(msg)
    @@exit_status = status if @@STATES[status] > @@STATES[@@exit_status]
    if should_exit
      do_exit
    end
  end

  def add_info(msg)
    @@results.push(msg)
  end

  def do_exit
    send(@@exit_status,"#{@@exit_status.upcase} - #{@@results.join('. ')}")
  end

  def run

    begin
      redis = Redis.new(:host => config[:host], :port => config[:port], :timeout => config[:timeout])
    rescue Redis::BaseConnectionError => e
      add_state(:critical, e, true)
    end

    begin
      master_addr, master_port = redis.sentinel('get-master-addr-by-name', config[:master])
      unless master_addr and master_port
        add_state(:critical, "No master returned for #{config[:master]}", true)
      end
    rescue Redis::BaseError => e
      add_state(:critical, "Could not establish master address: #{e}", true)
    end

    begin
      master = Redis.new(:host => master_addr, :port => master_port)
      node_info = master.info
    rescue
      add_state(:critical, "Master #{config[:master]} unreachable at #{master_addr}:#{master_port}", true)
    end

    add_info("Master is #{master_addr}:#{master_port}")

    unless node_info['role'] == 'master'
      add_state(:critical, "Role is #{node_info['role']} but should be master")
    end
    do_exit
  end
end
